# -*- coding: utf-8 -*-
"""Daeguro_Hackathon_kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RRJZxAQz8fHbtgcRa-Hz5US31MjXopIB
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.preprocessing import scale
from sklearn.datasets import load_iris
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
# %matplotlib inline

df_csv = pd.read_csv('/content/sample_data/(Final)yayaya4.csv')
df_csv

df_csv.dtypes
#df_csv.astype('float')
#df_csv.dtypes

print(type(df_csv))

kmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, random_state=100)
kmeans.fit(df_csv)

print(kmeans.labels_)

df_csv.describe()

df_csv.isnull().sum()

# kmeans -> 거리기반 알고리즘 -> 표준화 진행

from sklearn.preprocessing import StandardScaler

standard_scaler = StandardScaler()
mall_scaled_df = pd.DataFrame(standard_scaler.fit_transform(df_csv), columns=df_csv.columns) # scaled된 데이터

from sklearn.cluster import KMeans

# k에 따라 군집 내 거리제곱합의 합이 어떻게 변하는 지 시각화하는 함수
def change_n_clusters(n_clusters, data):
    sum_of_squared_distance = []
    for n_cluster in n_clusters:
        kmeans = KMeans(n_clusters=n_cluster)
        kmeans.fit(df_csv)
        sum_of_squared_distance.append(kmeans.inertia_)
        
    plt.figure(1 , figsize = (12, 6))
    plt.plot(n_clusters , sum_of_squared_distance , 'o')
    plt.plot(n_clusters , sum_of_squared_distance , '-' , alpha = 0.5)
    plt.xlabel('Number of Clusters')
    plt.ylabel('Inertia')

n_clusters = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

#엘보우결과 3정도가 적당한 클러스터 수임을 알 수 있다.
change_n_clusters(n_clusters, df_csv)

#MinMaxScaler 적용 (표준화)
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

scaler.fit(df_csv)
df_scaled = scaler.transform(df_csv)

df_scaled

# nd.array형인 df_scaled를 dataframe으로 수정하는 코드
df_scaled = pd.DataFrame(df_scaled, columns = ['2030대 인구', '유동인구','대구로카페주문고객'])

df_scaled

df_scaled['총점'] = df_scaled['2030대 인구'] + df_scaled['유동인구']+ df_scaled['대구로카페주문고객']
df_scaled

# scaling한 데이터를 kmeans(k=3)으로 학습하고 시각화

kmeans = KMeans(n_clusters=3)
clusters = kmeans.fit(df_scaled)

plt.figure(figsize=(20, 6))
plt.subplot(131)
sns.scatterplot(x='2030대 인구', y='유동인구', data=df_scaled, hue=kmeans.labels_,palette='coolwarm')
plt.scatter(kmeans.cluster_centers_[:, 2], kmeans.cluster_centers_[:, 3], c='red', alpha=0.5, s=150)

plt.subplot(132)
sns.scatterplot(x='유동인구', y='대구로카페주문고객', data=df_scaled, hue=kmeans.labels_, palette='coolwarm')
plt.scatter(kmeans.cluster_centers_[:, 1], kmeans.cluster_centers_[:, 3], c='red', alpha=0.5, s=150)

plt.subplot(133)
sns.scatterplot(x='대구로카페주문고객', y='2030대 인구', data=df_scaled, hue=kmeans.labels_, palette='coolwarm')
plt.scatter(kmeans.cluster_centers_[:, 1], kmeans.cluster_centers_[:, 2], c='red', alpha=0.5, s=150)

df_scaled['cluster'] = clusters.labels_
df_scaled.head()

df_scaled

df_scaled

#내보내기
df_scaled.to_csv('/content/sample_data/beforecluster.csv')